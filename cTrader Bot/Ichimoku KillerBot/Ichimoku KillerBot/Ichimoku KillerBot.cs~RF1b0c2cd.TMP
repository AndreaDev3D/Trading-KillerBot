using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots.Colorize
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class IchimokuKillerBot : Robot
    {
        [Parameter("Trading Lot", DefaultValue = 0.01)]
        public double TradingLot { get; set; }
        //--- Trading
        [Parameter("Profit in Pips", DefaultValue = 50)]
        public int MinProfitInPips { get; set; }
        [Parameter("Stoploss in Pips", DefaultValue = 150)]
        public int StopLossInPips { get; set; }
        [Parameter(DefaultValue = 1)]
        private int MaxTradeNumber { get; set; }
        //--- Indicator
        [Parameter("Ichimoku", DefaultValue = 14)]
        private IchimokuKinkoHyo Ichimoku;
        [Parameter("Tenkan", DefaultValue = 6)]
        public int Tenkan { get; set; }
        [Parameter("Kijun", DefaultValue = 15)]
        public int Kijun { get; set; }
        [Parameter("Chikou", DefaultValue = 34)]
        public int Chikou { get; set; }

        protected override void OnStart()
        {
            // Put your initialization logic here
            Ichimoku = Indicators.IchimokuKinkoHyo(Tenkan, Kijun, Chikou);
        }

        protected override void OnTick()
        {
            // Put your core logic here
            Print("ChikouSpan Value = {0}", Ichimoku.ChikouSpan.LastValue);
            Print("KijunSen Value = {0}", Ichimoku.KijunSen.LastValue);
            Print("SenkouSpanA Value = {0}", Ichimoku.SenkouSpanA.LastValue);
            Print("SenkouSpanB Value = {0}", Ichimoku.SenkouSpanB.LastValue);
            Print("TenkanSen Value = {0}", Ichimoku.TenkanSen.LastValue);
        }

        protected override void OnStop()
        {
            // Put your deinitialization logic here
        }
    }
}
